{"version":3,"sources":["logoCM.png","SideBar.js","Episode.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SideBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","isToggleOn","_this2","timerID","setInterval","tick","clearInterval","setState","changeSeason","onSeasonChange","react_default","a","createElement","className","onClick","React","Component","Episode","rel","target","href","videoId","src","thumbnail","alt","title","require","config","App","episodes","playlists","season","markUp","url","fetch","then","e","json","res","push","items","getEpisodes","arg","renderEpisodes","source","replace","aux","episodeRendered","map","key","snippet","resourceId","src_Episode_0","thumbnails","high","src_SideBar_0","bind","logoCM","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ada20d28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logoCM.50b82309.png\";","import React from 'react';\r\n// import pattern from './pattern-l.png';\r\nimport './SideBar.css';\r\n\r\n// function SideBar(props) {\r\n//       return (\r\n//             <div className=\"sideBar\">\r\n//                   <div className=\"inneR\">\r\n\r\n//                         <img src={logoCM} alt=\"CMarmy\" />\r\n//                         <h1>Hello from sidebar</h1>\r\n//                         <div>\r\n//                               <h1>Hello, world!</h1>\r\n//                               <h2>Time = {props.date.toLocaleTimeString()}.</h2>\r\n//                         </div>\r\n//                   </div>\r\n//             </div>\r\n//       );\r\n// }\r\n\r\n\r\nclass SideBar extends React.Component {\r\n      constructor(props) {\r\n            super(props);\r\n            this.state = { date: new Date(), isToggleOn: false };\r\n      }\r\n      componentDidMount() {\r\n            this.timerID = setInterval(\r\n                  () => this.tick(), 1000\r\n            );\r\n      }\r\n\r\n      componentWillUnmount() {\r\n            clearInterval(this.timerID);\r\n      }\r\n      tick() {\r\n            this.setState({\r\n                  date: new Date()\r\n            });\r\n      }\r\n      handleClick() {\r\n            this.setState(state => ({\r\n                  isToggleOn: !state.isToggleOn\r\n            }));\r\n\r\n\r\n      }\r\n      render() {\r\n            var changeSeason = this.props.onSeasonChange;\r\n            return (\r\n                  <div className=\"sideBar\">\r\n                        <div className=\"inneR\">\r\n                              <h1 className=\"main-title\"><b>RObotziDB</b></h1>\r\n                              <ul className=\"season-list\">\r\n                                    <li onClick={()=>{\r\n                                          changeSeason(1)\r\n                                    }}>Season I</li>\r\n                                    <li onClick={()=>{\r\n                                          changeSeason(2)\r\n                                    }}>Season II</li>\r\n                                    <li onClick={()=>{\r\n                                          changeSeason(3)\r\n                                    }}>Season III</li>\r\n                                    <li onClick={()=>{\r\n                                          changeSeason(4)\r\n                                    }}>Season IV</li>\r\n                                    <li onClick={()=>{\r\n                                          changeSeason(5)\r\n                                    }}>Season V</li>\r\n                              </ul>\r\n                        </div>\r\n                  </div>\r\n            );\r\n      }\r\n}\r\nexport default SideBar;","import React from 'react';\r\nimport './Episode.css';\r\n// import playArrow from './24px.svg';\r\n\r\n\r\n\r\nclass Episode extends React.Component {\r\n      constructor(props) {\r\n            super(props);\r\n            this.state = {};\r\n      }\r\n      //Exemple from official docs\r\n      // componentDidMount() {\r\n      //       fetchPosts().then(response => {\r\n      //             this.setState({\r\n      //                   posts: response.posts\r\n      //             });\r\n      //       });\r\n\r\n      //       fetchComments().then(response => {\r\n      //             this.setState({\r\n      //                   comments: response.comments\r\n      //             });\r\n      //       });\r\n      // }\r\n      render() {\r\n            return (\r\n                  <div className=\"Episode\" >\r\n                        {/* eslint-disable-next-line */}\r\n                        <a rel=\"noopener norefereer\"  target=\"_blank\" href={\"https://youtu.be/\"+this.props.videoId}  >\r\n                              <img src={this.props.thumbnail} alt=\"\"/>\r\n                        </a>\r\n                        <span className=\"title\">{this.props.title}</span>\r\n                        {/* <img src={playArrow} className=\"playArrow\"/> */}\r\n                        {/* <svg className=\"playArrow\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n                              <path d=\"M8 5v14l11-7z\" />\r\n                              <path fill=\"none\" d=\"M0 0h24v24H0z\" />\r\n                        </svg> */}\r\n                  </div>\r\n            );\r\n      }\r\n}\r\n\r\nexport default Episode;","import React from 'react';\n// import logo from './logo.svg';\nimport logoCM from './logoCM.png';\nimport SideBar from './SideBar';\nimport Episode from './Episode';\n\nimport './App.css';\n\nrequire('dotenv').config();\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      episodes:[],\n      playlists:[],\n      season:1,\n      markUp:\"\",\n    };\n  }\n  // renderEpisodes(){\n  //   console.log(this.state.season);\n  // }\n  async getEpisodes(url){\n    await fetch(\"https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=30&playlistId=\"+url+\"&key=AIzaSyBcgLoZB4mhPtUusT4Ff3kn34KZ9jv_sWY\")\n      .then(e=>e.json())\n      .then(res=>\n        this.setState((state)=>{\n          state.episodes.push(res.items);\n        })\n      ); \n  }\n  async componentDidMount(){\n    //this for S0.1 episodes\n    //https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=30&playlistId=PLllaRC97fgczIkal5pcRZDKDvqHbsDqRw&key=AIzaSyBcgLoZB4mhPtUusT4Ff3kn34KZ9jv_sWY\n    this.setState({\n      playlists:[\"PLllaRC97fgczIkal5pcRZDKDvqHbsDqRw\",\n                 \"PLllaRC97fgcxaq6Vu2zN9GxYh3Gckmj9k\",\n                 \"PLllaRC97fgcyax2Yrwb0f6FiLi-WUQSQq\",\n                 \"PLllaRC97fgcxlkrlCO5T3PCambA9s3Cz9\",\n                 \"PLllaRC97fgcxMDrr4jY9YuBVxyf5d9o3O\"]\n    });\n    // this.state.playlists.forEach((e)=>{\n    //   this.getEpisodes(e);\n    //   console.log(1);\n    // });\n    await this.getEpisodes('PLllaRC97fgczIkal5pcRZDKDvqHbsDqRw');\n    await this.getEpisodes('PLllaRC97fgcxaq6Vu2zN9GxYh3Gckmj9k');\n    await this.getEpisodes('PLllaRC97fgcyax2Yrwb0f6FiLi-WUQSQq');\n    await this.getEpisodes('PLllaRC97fgcxlkrlCO5T3PCambA9s3Cz9');\n    await this.getEpisodes('PLllaRC97fgcxMDrr4jY9YuBVxyf5d9o3O');\n    this.changeSeason(1);\n  }\n\n\n  changeSeason(arg){\n    this.setState({\n      season:arg,\n    },\n    this.renderEpisodes\n    );\n    \n  }\n  prepareTitle(source){\n    return source.replace(\".\",\" \");\n  }\n  \n  render() {\n    var changeSeason=this.changeSeason;\n    let season=this.state.season-1;\n    let aux = this.state.episodes[season];\n    // console.log(this.state.episodes);\n    const episodeRendered = (aux) ? aux.map((e)=>(\n      <div key = {e.snippet.resourceId.videoId}>\n        <Episode thumbnail={e.snippet.thumbnails.high.url} title={e.snippet.title} videoId={e.snippet.resourceId.videoId}/>\n      </div>\n    )) : \"Loading\";\n    // let seasons = this.state.episodes;\n    return (\n      <div className=\"App\">\n        <SideBar onSeasonChange={changeSeason.bind(this)} />\n        <header className=\"App-header\">\n          <h1>Sezonul {this.state.season}</h1>\n          <br/>\n          <img src={logoCM} className=\"App-logo\" alt=\"logo\" />\n          <div className=\"episodes\">\n            {episodeRendered}\n            {/* <Episode thumbnail=\"https://i.ytimg.com/vi/aYPFHoO-Ae0/hqdefault.jpg?sqp=-oaymwEZCNACELwBSFXyq4qpAwsIARUAAIhCGAFwAQ==&rs=AOn4CLBgZpeqU9eszObloGOrr6JCHAD90Q\" title=\"Vin\" />\n            <Episode title=\"Buton\" />\n            <Episode title=\"Pilot\" /> */}\n          </div>\n        </header>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import SideBar from './SideBar';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}